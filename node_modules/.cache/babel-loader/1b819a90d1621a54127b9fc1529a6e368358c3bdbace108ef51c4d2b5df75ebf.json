{"ast":null,"code":"// popup.js\nimport{useState}from'react';import'./popup.css';import checkCredentials from'./Login';import CryptoJS from'crypto-js';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";function hashString(str){return CryptoJS.SHA256(str).toString();}function Popup(_ref){let{isOpen,onClose,onLogin,onRegister}=_ref;const[isLogin,setIsLogin]=useState(true);const[username,setUsername]=useState('');const[password,setPassword]=useState('');// Keep raw password in state\nconst[error,setError]=useState('');const[confirmPassword,setConfirmPassword]=useState('');const toggleForm=()=>{setIsLogin(!isLogin);setError('');setPassword('');setConfirmPassword('');};const handleLoginSubmit=async e=>{e.preventDefault();setError('');if(!username||!password){setError('Пожалуйста, введите логин и пароль');return;}try{// Hash the password before sending\nconst hashedPassword=hashString(password);const isValid=await checkCredentials(username,hashedPassword);if(isValid){const userData=await checkCredentials(username,hashedPassword);onLogin(username);// call login function passed from parent\nonClose();// close the popup after successful login\n}else{setError('Неверные учетные данные');}}catch(err){setError('Ошибка при проверке учетных данных');console.error('Login error:',err);}};const checkUsernameExists=async username=>{try{const response=await fetch(`http://localhost:5000/api/checkusername?username=${encodeURIComponent(username)}`);if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}return(await response.json()).exists;}catch(err){console.error('Error checking username:',err);throw err;}};const registerUser=async(username,password_hash)=>{try{console.log('Registering user:',username);const response=await fetch('http://localhost:5000/api/register',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username,password_hash})});if(!response.ok){const errorData=await response.json().catch(()=>({}));throw new Error(errorData.message||'Ошибка регистрации');}return await response.json();}catch(err){console.error('Registration API error:',err);throw err;}};const handleRegisterSubmit=async e=>{e.preventDefault();setError('');if(!username||!password||!confirmPassword){setError('Пожалуйста, заполните все поля');return;}if(password!==confirmPassword){setError('Пароли не совпадают');return;}try{const usernameExists=await checkUsernameExists(username);if(usernameExists){setError('Ошибка! Пользователь с таким логином уже существует');return;}const hashedPassword=hashString(password);const registrationResult=await registerUser(username,hashedPassword);if(registrationResult.success){await onRegister();onClose();}else{setError(registrationResult.message||'Ошибка при регистрации');}}catch(err){setError(err.message||'Ошибка при регистрации');console.error('Registration error:',err);}};if(!isOpen){return null;}return/*#__PURE__*/_jsx(\"div\",{className:\"popup\",children:/*#__PURE__*/_jsx(\"div\",{className:\"popup-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"popup-body\",children:[/*#__PURE__*/_jsx(\"h2\",{children:isLogin?'Вход в аккаунт':'Регистрация'}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:isLogin?handleLoginSubmit:handleRegisterSubmit,children:[isLogin?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\u041B\\u043E\\u0433\\u0438\\u043D\",value:username,onChange:e=>setUsername(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",value:password,onChange:e=>setPassword(e.target.value)})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\u041B\\u043E\\u0433\\u0438\\u043D\",value:username,onChange:e=>setUsername(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",value:password,onChange:e=>setPassword(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"\\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0434\\u0438\\u0442\\u0435 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\",value:confirmPassword,onChange:e=>{setConfirmPassword(e.target.value);if(e.target.value!==password){setError('Пароли не совпадают');}else{setError('');}}})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:isLogin?'Войти':'Зарегистрироваться'})]}),/*#__PURE__*/_jsx(\"p\",{onClick:toggleForm,className:\"toggle-form\",children:isLogin?'Нет аккаунта? Зарегистрироваться':'Уже есть аккаунт? Войти'}),/*#__PURE__*/_jsx(\"div\",{className:\"popup-close\",onClick:onClose,children:\"\\u2716\"})]})})});}console.log(hashString('Cheese'));export default Popup;","map":{"version":3,"names":["useState","checkCredentials","CryptoJS","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","hashString","str","SHA256","toString","Popup","_ref","isOpen","onClose","onLogin","onRegister","isLogin","setIsLogin","username","setUsername","password","setPassword","error","setError","confirmPassword","setConfirmPassword","toggleForm","handleLoginSubmit","e","preventDefault","hashedPassword","isValid","userData","err","console","checkUsernameExists","response","fetch","encodeURIComponent","ok","Error","status","json","exists","registerUser","password_hash","log","method","headers","body","JSON","stringify","errorData","catch","message","handleRegisterSubmit","usernameExists","registrationResult","success","className","children","onSubmit","type","placeholder","value","onChange","target","onClick"],"sources":["C:/Users/Yulia/OneDrive - Peter the Great St. Petersburg Polytechnical University/Рабочий стол/bound/OPD_site/src/components/popup.js"],"sourcesContent":["// popup.js\r\nimport { useState } from 'react';\r\nimport './popup.css';\r\nimport checkCredentials from './Login';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nfunction hashString(str) {\r\n  return CryptoJS.SHA256(str).toString();\r\n}\r\n\r\nfunction Popup({ isOpen, onClose, onLogin, onRegister }) {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState(''); // Keep raw password in state\r\n  const [error, setError] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n\r\n  const toggleForm = () => {\r\n    setIsLogin(!isLogin);\r\n    setError('');\r\n    setPassword('');\r\n    setConfirmPassword('');\r\n  };\r\n  \r\n  const handleLoginSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    \r\n    if (!username || !password) {\r\n      setError('Пожалуйста, введите логин и пароль');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Hash the password before sending\r\n      const hashedPassword = hashString(password);\r\n      const isValid = await checkCredentials(username, hashedPassword);\r\n      \r\n      if (isValid) {\r\n        const userData = await checkCredentials(username, hashedPassword);\r\n        onLogin(username);  // call login function passed from parent\r\n        onClose();   // close the popup after successful login\r\n      } else {\r\n        setError('Неверные учетные данные');\r\n      }\r\n    } catch (err) {\r\n      setError('Ошибка при проверке учетных данных');\r\n      console.error('Login error:', err);\r\n    }\r\n  };\r\n\r\n  const checkUsernameExists = async (username) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/checkusername?username=${encodeURIComponent(username)}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return (await response.json()).exists;\r\n    } catch (err) {\r\n      console.error('Error checking username:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const registerUser = async (username, password_hash) => {\r\n    try {\r\n      console.log('Registering user:', username);\r\n      const response = await fetch('http://localhost:5000/api/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password_hash }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.message || 'Ошибка регистрации');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      console.error('Registration API error:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const handleRegisterSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    \r\n    if (!username || !password || !confirmPassword) {\r\n      setError('Пожалуйста, заполните все поля');\r\n      return;\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      setError('Пароли не совпадают');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const usernameExists = await checkUsernameExists(username);\r\n      if (usernameExists) {\r\n        setError('Ошибка! Пользователь с таким логином уже существует');\r\n        return;\r\n      }\r\n\r\n      const hashedPassword = hashString(password);\r\n      const registrationResult = await registerUser(username, hashedPassword);\r\n      \r\n      if (registrationResult.success) {\r\n        await onRegister();\r\n        onClose();\r\n      } else {\r\n        setError(registrationResult.message || 'Ошибка при регистрации');\r\n      }\r\n    } catch (err) {\r\n      setError(err.message || 'Ошибка при регистрации');\r\n      console.error('Registration error:', err);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"popup\">\r\n      <div className=\"popup-container\">\r\n        <div className=\"popup-body\">\r\n          <h2>{isLogin ? 'Вход в аккаунт' : 'Регистрация'}</h2>\r\n          {error && <div className=\"error-message\">{error}</div>}\r\n          <form onSubmit={isLogin ? handleLoginSubmit : handleRegisterSubmit}>\r\n            {isLogin ? (\r\n              <>\r\n                <input \r\n                  type=\"text\" \r\n                  placeholder=\"Логин\" \r\n                  value={username}\r\n                  onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n                <input \r\n                  type=\"password\" \r\n                  placeholder=\"Пароль\" \r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n              </>\r\n            ) : (\r\n              <>\r\n                <input \r\n                  type=\"text\" \r\n                  placeholder=\"Логин\" \r\n                  value={username}\r\n                  onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n                <input \r\n                  type=\"password\" \r\n                  placeholder=\"Пароль\" \r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                <input \r\n                  type=\"password\" \r\n                  placeholder=\"Подтвердите пароль\" \r\n                  value={confirmPassword}\r\n                  onChange={(e) => {\r\n                    setConfirmPassword(e.target.value);\r\n                    if (e.target.value !== password) {\r\n                      setError('Пароли не совпадают');\r\n                    } else {\r\n                      setError('');\r\n                    }\r\n                  }}\r\n                />\r\n              </>\r\n            )}\r\n            <button type=\"submit\">\r\n              {isLogin ? 'Войти' : 'Зарегистрироваться'}\r\n            </button>\r\n          </form>\r\n\r\n          <p onClick={toggleForm} className=\"toggle-form\">\r\n            {isLogin ? 'Нет аккаунта? Зарегистрироваться' : 'Уже есть аккаунт? Войти'}\r\n          </p>\r\n\r\n          <div className=\"popup-close\" onClick={onClose}>&#10006;</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconsole.log(hashString('Cheese'))\r\n\r\nexport default Popup;"],"mappings":"AAAA;AACA,OAASA,QAAQ,KAAQ,OAAO,CAChC,MAAO,aAAa,CACpB,MAAO,CAAAC,gBAAgB,KAAM,SAAS,CACtC,MAAO,CAAAC,QAAQ,KAAM,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEjC,QAAS,CAAAC,UAAUA,CAACC,GAAG,CAAE,CACvB,MAAO,CAAAR,QAAQ,CAACS,MAAM,CAACD,GAAG,CAAC,CAACE,QAAQ,CAAC,CAAC,CACxC,CAEA,QAAS,CAAAC,KAAKA,CAAAC,IAAA,CAA2C,IAA1C,CAAEC,MAAM,CAAEC,OAAO,CAAEC,OAAO,CAAEC,UAAW,CAAC,CAAAJ,IAAA,CACrD,KAAM,CAACK,OAAO,CAAEC,UAAU,CAAC,CAAGpB,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACqB,QAAQ,CAAEC,WAAW,CAAC,CAAGtB,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACuB,QAAQ,CAAEC,WAAW,CAAC,CAAGxB,QAAQ,CAAC,EAAE,CAAC,CAAE;AAC9C,KAAM,CAACyB,KAAK,CAAEC,QAAQ,CAAC,CAAG1B,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAAC2B,eAAe,CAAEC,kBAAkB,CAAC,CAAG5B,QAAQ,CAAC,EAAE,CAAC,CAE1D,KAAM,CAAA6B,UAAU,CAAGA,CAAA,GAAM,CACvBT,UAAU,CAAC,CAACD,OAAO,CAAC,CACpBO,QAAQ,CAAC,EAAE,CAAC,CACZF,WAAW,CAAC,EAAE,CAAC,CACfI,kBAAkB,CAAC,EAAE,CAAC,CACxB,CAAC,CAED,KAAM,CAAAE,iBAAiB,CAAG,KAAO,CAAAC,CAAC,EAAK,CACrCA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClBN,QAAQ,CAAC,EAAE,CAAC,CAEZ,GAAI,CAACL,QAAQ,EAAI,CAACE,QAAQ,CAAE,CAC1BG,QAAQ,CAAC,oCAAoC,CAAC,CAC9C,OACF,CAEA,GAAI,CACF;AACA,KAAM,CAAAO,cAAc,CAAGxB,UAAU,CAACc,QAAQ,CAAC,CAC3C,KAAM,CAAAW,OAAO,CAAG,KAAM,CAAAjC,gBAAgB,CAACoB,QAAQ,CAAEY,cAAc,CAAC,CAEhE,GAAIC,OAAO,CAAE,CACX,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAlC,gBAAgB,CAACoB,QAAQ,CAAEY,cAAc,CAAC,CACjEhB,OAAO,CAACI,QAAQ,CAAC,CAAG;AACpBL,OAAO,CAAC,CAAC,CAAI;AACf,CAAC,IAAM,CACLU,QAAQ,CAAC,yBAAyB,CAAC,CACrC,CACF,CAAE,MAAOU,GAAG,CAAE,CACZV,QAAQ,CAAC,oCAAoC,CAAC,CAC9CW,OAAO,CAACZ,KAAK,CAAC,cAAc,CAAEW,GAAG,CAAC,CACpC,CACF,CAAC,CAED,KAAM,CAAAE,mBAAmB,CAAG,KAAO,CAAAjB,QAAQ,EAAK,CAC9C,GAAI,CACF,KAAM,CAAAkB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,oDAAoDC,kBAAkB,CAACpB,QAAQ,CAAC,EAAE,CAAC,CAChH,GAAI,CAACkB,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuBJ,QAAQ,CAACK,MAAM,EAAE,CAAC,CAC3D,CACA,MAAO,CAAC,KAAM,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,EAAEC,MAAM,CACvC,CAAE,MAAOV,GAAG,CAAE,CACZC,OAAO,CAACZ,KAAK,CAAC,0BAA0B,CAAEW,GAAG,CAAC,CAC9C,KAAM,CAAAA,GAAG,CACX,CACF,CAAC,CAED,KAAM,CAAAW,YAAY,CAAG,KAAAA,CAAO1B,QAAQ,CAAE2B,aAAa,GAAK,CACtD,GAAI,CACFX,OAAO,CAACY,GAAG,CAAC,mBAAmB,CAAE5B,QAAQ,CAAC,CAC1C,KAAM,CAAAkB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,oCAAoC,CAAE,CACjEU,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEjC,QAAQ,CAAE2B,aAAc,CAAC,CAClD,CAAC,CAAC,CAEF,GAAI,CAACT,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,CAAAa,SAAS,CAAG,KAAM,CAAAhB,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACW,KAAK,CAAC,KAAO,CAAC,CAAC,CAAC,CAAC,CACzD,KAAM,IAAI,CAAAb,KAAK,CAACY,SAAS,CAACE,OAAO,EAAI,oBAAoB,CAAC,CAC5D,CAEA,MAAO,MAAM,CAAAlB,QAAQ,CAACM,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOT,GAAG,CAAE,CACZC,OAAO,CAACZ,KAAK,CAAC,yBAAyB,CAAEW,GAAG,CAAC,CAC7C,KAAM,CAAAA,GAAG,CACX,CACF,CAAC,CAED,KAAM,CAAAsB,oBAAoB,CAAG,KAAO,CAAA3B,CAAC,EAAK,CACxCA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClBN,QAAQ,CAAC,EAAE,CAAC,CAEZ,GAAI,CAACL,QAAQ,EAAI,CAACE,QAAQ,EAAI,CAACI,eAAe,CAAE,CAC9CD,QAAQ,CAAC,gCAAgC,CAAC,CAC1C,OACF,CAEA,GAAIH,QAAQ,GAAKI,eAAe,CAAE,CAChCD,QAAQ,CAAC,qBAAqB,CAAC,CAC/B,OACF,CAEA,GAAI,CACF,KAAM,CAAAiC,cAAc,CAAG,KAAM,CAAArB,mBAAmB,CAACjB,QAAQ,CAAC,CAC1D,GAAIsC,cAAc,CAAE,CAClBjC,QAAQ,CAAC,qDAAqD,CAAC,CAC/D,OACF,CAEA,KAAM,CAAAO,cAAc,CAAGxB,UAAU,CAACc,QAAQ,CAAC,CAC3C,KAAM,CAAAqC,kBAAkB,CAAG,KAAM,CAAAb,YAAY,CAAC1B,QAAQ,CAAEY,cAAc,CAAC,CAEvE,GAAI2B,kBAAkB,CAACC,OAAO,CAAE,CAC9B,KAAM,CAAA3C,UAAU,CAAC,CAAC,CAClBF,OAAO,CAAC,CAAC,CACX,CAAC,IAAM,CACLU,QAAQ,CAACkC,kBAAkB,CAACH,OAAO,EAAI,wBAAwB,CAAC,CAClE,CACF,CAAE,MAAOrB,GAAG,CAAE,CACZV,QAAQ,CAACU,GAAG,CAACqB,OAAO,EAAI,wBAAwB,CAAC,CACjDpB,OAAO,CAACZ,KAAK,CAAC,qBAAqB,CAAEW,GAAG,CAAC,CAC3C,CACF,CAAC,CAED,GAAI,CAACrB,MAAM,CAAE,CACX,MAAO,KAAI,CACb,CAEA,mBACEX,IAAA,QAAK0D,SAAS,CAAC,OAAO,CAAAC,QAAA,cACpB3D,IAAA,QAAK0D,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9BvD,KAAA,QAAKsD,SAAS,CAAC,YAAY,CAAAC,QAAA,eACzB3D,IAAA,OAAA2D,QAAA,CAAK5C,OAAO,CAAG,gBAAgB,CAAG,aAAa,CAAK,CAAC,CACpDM,KAAK,eAAIrB,IAAA,QAAK0D,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAEtC,KAAK,CAAM,CAAC,cACtDjB,KAAA,SAAMwD,QAAQ,CAAE7C,OAAO,CAAGW,iBAAiB,CAAG4B,oBAAqB,CAAAK,QAAA,EAChE5C,OAAO,cACNX,KAAA,CAAAF,SAAA,EAAAyD,QAAA,eACE3D,IAAA,UACE6D,IAAI,CAAC,MAAM,CACXC,WAAW,CAAC,gCAAO,CACnBC,KAAK,CAAE9C,QAAS,CAChB+C,QAAQ,CAAGrC,CAAC,EAAKT,WAAW,CAACS,CAAC,CAACsC,MAAM,CAACF,KAAK,CAAE,CAC9C,CAAC,cACF/D,IAAA,UACE6D,IAAI,CAAC,UAAU,CACfC,WAAW,CAAC,sCAAQ,CACpBC,KAAK,CAAE5C,QAAS,CAChB6C,QAAQ,CAAGrC,CAAC,EAAKP,WAAW,CAACO,CAAC,CAACsC,MAAM,CAACF,KAAK,CAAE,CAC9C,CAAC,EACF,CAAC,cAEH3D,KAAA,CAAAF,SAAA,EAAAyD,QAAA,eACE3D,IAAA,UACE6D,IAAI,CAAC,MAAM,CACXC,WAAW,CAAC,gCAAO,CACnBC,KAAK,CAAE9C,QAAS,CAChB+C,QAAQ,CAAGrC,CAAC,EAAKT,WAAW,CAACS,CAAC,CAACsC,MAAM,CAACF,KAAK,CAAE,CAC9C,CAAC,cACF/D,IAAA,UACE6D,IAAI,CAAC,UAAU,CACfC,WAAW,CAAC,sCAAQ,CACpBC,KAAK,CAAE5C,QAAS,CAChB6C,QAAQ,CAAGrC,CAAC,EAAKP,WAAW,CAACO,CAAC,CAACsC,MAAM,CAACF,KAAK,CAAE,CAC9C,CAAC,cACF/D,IAAA,UACE6D,IAAI,CAAC,UAAU,CACfC,WAAW,CAAC,yGAAoB,CAChCC,KAAK,CAAExC,eAAgB,CACvByC,QAAQ,CAAGrC,CAAC,EAAK,CACfH,kBAAkB,CAACG,CAAC,CAACsC,MAAM,CAACF,KAAK,CAAC,CAClC,GAAIpC,CAAC,CAACsC,MAAM,CAACF,KAAK,GAAK5C,QAAQ,CAAE,CAC/BG,QAAQ,CAAC,qBAAqB,CAAC,CACjC,CAAC,IAAM,CACLA,QAAQ,CAAC,EAAE,CAAC,CACd,CACF,CAAE,CACH,CAAC,EACF,CACH,cACDtB,IAAA,WAAQ6D,IAAI,CAAC,QAAQ,CAAAF,QAAA,CAClB5C,OAAO,CAAG,OAAO,CAAG,oBAAoB,CACnC,CAAC,EACL,CAAC,cAEPf,IAAA,MAAGkE,OAAO,CAAEzC,UAAW,CAACiC,SAAS,CAAC,aAAa,CAAAC,QAAA,CAC5C5C,OAAO,CAAG,kCAAkC,CAAG,yBAAyB,CACxE,CAAC,cAEJf,IAAA,QAAK0D,SAAS,CAAC,aAAa,CAACQ,OAAO,CAAEtD,OAAQ,CAAA+C,QAAA,CAAC,QAAQ,CAAK,CAAC,EAC1D,CAAC,CACH,CAAC,CACH,CAAC,CAEV,CAEA1B,OAAO,CAACY,GAAG,CAACxC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAEjC,cAAe,CAAAI,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}