{"ast":null,"code":"import React from 'react';\nimport CryptoJS from 'crypto-js';\nasync function check(username, password_hash, data) {\n  const user = data.find(u => u.username === username);\n  if (!user) {\n    console.log('User not found');\n    return false;\n  }\n  const isPasswordValid = password_hash === user.password_hash;\n  if (!isPasswordValid) {\n    console.log('Invalid password');\n    return false;\n  }\n  return true;\n}\nexport async function checkCredentials(username, password_hash) {\n  try {\n    const response = await fetch('http://localhost:5000/api/users');\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Users:', data);\n    return check(username, password_hash, data);\n  } catch (error) {\n    console.error('Failed to fetch users:', error);\n  }\n}\nexport function hashString(str) {\n  return CryptoJS.SHA256(str).toString();\n}\nexport async function checkUsernameExists(username) {\n  try {\n    const response = await fetch(`http://localhost:5000/api/checkusername?username=${encodeURIComponent(username)}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return (await response.json()).exists;\n  } catch (err) {\n    console.error('Error checking username:', err);\n    throw err;\n  }\n}\nexport async function registerUser(username, passwordHash, role = 'user') {\n  try {\n    const response = await fetch('http://localhost:5000/api/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password_hash: passwordHash,\n        role\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.message || 'Ошибка регистрации');\n    }\n    return await response.json();\n  } catch (err) {\n    console.error('Registration API error:', err);\n    throw err;\n  }\n}","map":{"version":3,"names":["React","CryptoJS","check","username","password_hash","data","user","find","u","console","log","isPasswordValid","checkCredentials","response","fetch","ok","Error","status","json","error","hashString","str","SHA256","toString","checkUsernameExists","encodeURIComponent","exists","err","registerUser","passwordHash","role","method","headers","body","JSON","stringify","errorData","catch","message"],"sources":["C:/Users/Yulia/OneDrive - Peter the Great St. Petersburg Polytechnical University/Рабочий стол/bound/OPD_site/src/components/Login.js"],"sourcesContent":["import React from 'react';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nasync function check(username, password_hash, data){ \r\n    const user = data.find((u) => u.username === username);\r\n    if (!user) {\r\n       console.log('User not found');\r\n       return false;\r\n    }\r\n    const isPasswordValid = (password_hash === user.password_hash);\r\n    if (!isPasswordValid) {\r\n        console.log('Invalid password');\r\n        return false;\r\n    }\r\n    return (true);\r\n}\r\n\r\n\r\nexport async function checkCredentials(username, password_hash) {\r\n    try {\r\n        const response = await fetch('http://localhost:5000/api/users');\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log('Users:', data);\r\n        return check(username, password_hash, data);\r\n      } catch (error) {\r\n        console.error('Failed to fetch users:', error);\r\n      }\r\n}\r\n\r\nexport function hashString(str) {\r\n  return CryptoJS.SHA256(str).toString();\r\n}\r\n\r\nexport async function checkUsernameExists(username) {\r\n  try {\r\n    const response = await fetch(`http://localhost:5000/api/checkusername?username=${encodeURIComponent(username)}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    return (await response.json()).exists;\r\n  } catch (err) {\r\n    console.error('Error checking username:', err);\r\n    throw err;\r\n  }\r\n}\r\n\r\nexport async function registerUser(username, passwordHash, role = 'user') {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/register', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ \r\n        username, \r\n        password_hash: passwordHash,\r\n        role \r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}));\r\n      throw new Error(errorData.message || 'Ошибка регистрации');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (err) {\r\n    console.error('Registration API error:', err);\r\n    throw err;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}