{"ast":null,"code":"const {\n  Client\n} = require('pg');\nconst client = new Client({\n  user: 'postgres',\n  host: 'localhost',\n  database: 'opd_db',\n  password: '0000',\n  port: 5432\n});\nclient.connect(function (err) {\n  if (err) throw err;\n  console.log(\"Database connected!\");\n});\nclient.query(`Select * from users`, (err, res) => {\n  if (!err) {\n    users = res.rows;\n    exports.client = users;\n  } else {\n    console.log(err.message);\n  }\n});\nclient.query(`Select * from products`, (err, res) => {\n  if (!err) {\n    items = res.rows;\n    exports.client = items;\n  } else {\n    console.log(err.message);\n  }\n});\nclient.query(`Select * from categories`, (err, res) => {\n  if (!err) {\n    categories = res.rows;\n    exports.client = categories;\n  } else {\n    console.log(err.message);\n  }\n});\nclient.query(`Select * from data_sources`, (err, res) => {\n  if (!err) {\n    data_sources = res.rows;\n    exports.client = data_sources;\n  } else {\n    console.log(err.message);\n  }\n});\nclient.query(`Select * from favorites`, (err, res) => {\n  if (!err) {\n    favorites = res.rows;\n    exports.client = favorites;\n  } else {\n    console.log(err.message);\n  }\n});\nclient.query(`Select * from scrape_logs`, (err, res) => {\n  if (!err) {\n    scrape_logs = res.rows;\n    exports.client = scrape_logs;\n  } else {\n    console.log(err.message);\n  }\n});\nclient.query(`Select * from shops`, (err, res) => {\n  if (!err) {\n    shops = res.rows;\n    exports.client = shops;\n  } else {\n    console.log(err.message);\n  }\n});\nclient.end;","map":{"version":3,"names":["Client","require","client","user","host","database","password","port","connect","err","console","log","query","res","users","rows","exports","message","items","categories","data_sources","favorites","scrape_logs","shops","end"],"sources":["C:/Users/Yulia/OneDrive - Peter the Great St. Petersburg Polytechnical University/Рабочий стол/bound/OPD_site/src/database.js"],"sourcesContent":["const { Client } = require('pg')\r\nconst client = new Client({\r\n  user: 'postgres',\r\n  host: 'localhost',\r\n  database: 'opd_db',\r\n  password: '0000',\r\n  port: 5432,\r\n})\r\n\r\nclient.connect(function(err) {\r\n  if (err) throw err;\r\n  console.log(\"Database connected!\");\r\n});\r\n\r\nclient.query(`Select * from users`, (err, res)=>{\r\n    if (!err){\r\n        users = res.rows;\r\n        exports.client = users;\r\n    }\r\n    else{\r\n        console.log(err.message)\r\n    }\r\n})\r\n\r\n\r\nclient.query(`Select * from products`, (err, res)=>{\r\n    if (!err){\r\n        items = res.rows;\r\n        exports.client = items;\r\n    }\r\n    else{\r\n        console.log(err.message)\r\n    }\r\n})\r\n\r\n\r\nclient.query(`Select * from categories`, (err, res)=>{\r\n    if (!err){\r\n        categories = res.rows;\r\n        exports.client = categories;\r\n    }\r\n    else{\r\n        console.log(err.message)\r\n    }\r\n})\r\n\r\nclient.query(`Select * from data_sources`, (err, res)=>{\r\n    if (!err){\r\n        data_sources = res.rows;\r\n        exports.client = data_sources;\r\n    }\r\n    else{\r\n        console.log(err.message)\r\n    }\r\n})\r\n\r\nclient.query(`Select * from favorites`, (err, res)=>{\r\n    if (!err){\r\n        favorites = res.rows;\r\n        exports.client = favorites;\r\n    }\r\n    else{\r\n        console.log(err.message)\r\n    }\r\n})\r\n\r\nclient.query(`Select * from scrape_logs`, (err, res)=>{\r\n    if (!err){\r\n        scrape_logs = res.rows;\r\n        exports.client = scrape_logs;\r\n    }\r\n    else{\r\n        console.log(err.message)\r\n    }\r\n})\r\n\r\nclient.query(`Select * from shops`, (err, res)=>{\r\n    if (!err){\r\n        shops = res.rows;\r\n        exports.client = shops;\r\n    }\r\n    else{\r\n        console.log(err.message)\r\n    }\r\n})\r\n\r\nclient.end;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}