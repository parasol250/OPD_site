{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yulia\\\\OneDrive - Peter the Great St. Petersburg Polytechnical University\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\bound\\\\OPD_site\\\\src\\\\components\\\\popup.js\",\n  _s = $RefreshSig$();\n// popup.js\nimport { useState } from 'react';\nimport './popup.css';\nimport checkCredentials from './Login';\nimport CryptoJS from 'crypto-js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction hashString(str) {\n  return CryptoJS.SHA256(str).toString();\n}\nfunction Popup({\n  isOpen,\n  onClose,\n  onLogin,\n  onRegister\n}) {\n  _s();\n  const [isLogin, setIsLogin] = useState(true);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState(''); // Keep raw password in state\n  const [error, setError] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const toggleForm = () => {\n    setIsLogin(!isLogin);\n    setError('');\n    setPassword('');\n    setConfirmPassword('');\n  };\n  const handleLoginSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    if (!username || !password) {\n      setError('Пожалуйста, введите логин и пароль');\n      return;\n    }\n    try {\n      // Hash the password before sending\n      const hashedPassword = hashString(password);\n      const isValid = await checkCredentials(username, hashedPassword);\n      if (isValid) {\n        const userData = await checkCredentials(username, hashedPassword);\n        onLogin(username); // call login function passed from parent\n        onClose(); // close the popup after successful login\n      } else {\n        setError('Неверные учетные данные');\n      }\n    } catch (err) {\n      setError('Ошибка при проверке учетных данных');\n      console.error('Login error:', err);\n    }\n  };\n  const checkUsernameExists = async username => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/checkusername?username=${encodeURIComponent(username)}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return (await response.json()).exists;\n    } catch (err) {\n      console.error('Error checking username:', err);\n      throw err;\n    }\n  };\n  const registerUser = async (username, password_hash) => {\n    try {\n      console.log('Registering user:', username);\n      const response = await fetch('http://localhost:5000/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password_hash\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Ошибка регистрации');\n      }\n      return await response.json();\n    } catch (err) {\n      console.error('Registration API error:', err);\n      throw err;\n    }\n  };\n  const handleRegisterSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    if (!username || !password || !confirmPassword) {\n      setError('Пожалуйста, заполните все поля');\n      return;\n    }\n    if (password !== confirmPassword) {\n      setError('Пароли не совпадают');\n      return;\n    }\n    try {\n      const usernameExists = await checkUsernameExists(username);\n      if (usernameExists) {\n        setError('Ошибка! Пользователь с таким логином уже существует');\n        return;\n      }\n      const hashedPassword = hashString(password);\n      const registrationResult = await registerUser(username, hashedPassword);\n      if (registrationResult.success) {\n        await onRegister();\n        onClose();\n      } else {\n        setError(registrationResult.message || 'Ошибка при регистрации');\n      }\n    } catch (err) {\n      setError(err.message || 'Ошибка при регистрации');\n      console.error('Registration error:', err);\n    }\n  };\n  if (!isOpen) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isLogin ? 'Вход в аккаунт' : 'Регистрация'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: isLogin ? handleLoginSubmit : handleRegisterSubmit,\n          children: [isLogin ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\u041B\\u043E\\u0433\\u0438\\u043D\",\n              value: username,\n              onChange: e => setUsername(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n              value: password,\n              onChange: e => setPassword(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\u041B\\u043E\\u0433\\u0438\\u043D\",\n              value: username,\n              onChange: e => setUsername(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n              value: password,\n              onChange: e => setPassword(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"\\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0434\\u0438\\u0442\\u0435 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n              value: confirmPassword,\n              onChange: e => {\n                setConfirmPassword(e.target.value);\n                if (e.target.value !== password) {\n                  setError('Пароли не совпадают');\n                } else {\n                  setError('');\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: isLogin ? 'Войти' : 'Зарегистрироваться'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: toggleForm,\n          className: \"toggle-form\",\n          children: isLogin ? 'Нет аккаунта? Зарегистрироваться' : 'Уже есть аккаунт? Войти'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popup-close\",\n          onClick: onClose,\n          children: \"\\u2716\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(Popup, \"wOngM6H8ZHxlr2IiSBBQNuaW3pI=\");\n_c = Popup;\nconsole.log(hashString('Cheese'));\nexport default Popup;\nvar _c;\n$RefreshReg$(_c, \"Popup\");","map":{"version":3,"names":["useState","checkCredentials","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","hashString","str","SHA256","toString","Popup","isOpen","onClose","onLogin","onRegister","_s","isLogin","setIsLogin","username","setUsername","password","setPassword","error","setError","confirmPassword","setConfirmPassword","toggleForm","handleLoginSubmit","e","preventDefault","hashedPassword","isValid","userData","err","console","checkUsernameExists","response","fetch","encodeURIComponent","ok","Error","status","json","exists","registerUser","password_hash","log","method","headers","body","JSON","stringify","errorData","catch","message","handleRegisterSubmit","usernameExists","registrationResult","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Yulia/OneDrive - Peter the Great St. Petersburg Polytechnical University/Рабочий стол/bound/OPD_site/src/components/popup.js"],"sourcesContent":["// popup.js\r\nimport { useState } from 'react';\r\nimport './popup.css';\r\nimport checkCredentials from './Login';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nfunction hashString(str) {\r\n  return CryptoJS.SHA256(str).toString();\r\n}\r\n\r\nfunction Popup({ isOpen, onClose, onLogin, onRegister }) {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState(''); // Keep raw password in state\r\n  const [error, setError] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n\r\n  const toggleForm = () => {\r\n    setIsLogin(!isLogin);\r\n    setError('');\r\n    setPassword('');\r\n    setConfirmPassword('');\r\n  };\r\n  \r\n  const handleLoginSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    \r\n    if (!username || !password) {\r\n      setError('Пожалуйста, введите логин и пароль');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Hash the password before sending\r\n      const hashedPassword = hashString(password);\r\n      const isValid = await checkCredentials(username, hashedPassword);\r\n      \r\n      if (isValid) {\r\n        const userData = await checkCredentials(username, hashedPassword);\r\n        onLogin(username);  // call login function passed from parent\r\n        onClose();   // close the popup after successful login\r\n      } else {\r\n        setError('Неверные учетные данные');\r\n      }\r\n    } catch (err) {\r\n      setError('Ошибка при проверке учетных данных');\r\n      console.error('Login error:', err);\r\n    }\r\n  };\r\n\r\n  const checkUsernameExists = async (username) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/checkusername?username=${encodeURIComponent(username)}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return (await response.json()).exists;\r\n    } catch (err) {\r\n      console.error('Error checking username:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const registerUser = async (username, password_hash) => {\r\n    try {\r\n      console.log('Registering user:', username);\r\n      const response = await fetch('http://localhost:5000/api/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password_hash }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.message || 'Ошибка регистрации');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      console.error('Registration API error:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const handleRegisterSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    \r\n    if (!username || !password || !confirmPassword) {\r\n      setError('Пожалуйста, заполните все поля');\r\n      return;\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      setError('Пароли не совпадают');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const usernameExists = await checkUsernameExists(username);\r\n      if (usernameExists) {\r\n        setError('Ошибка! Пользователь с таким логином уже существует');\r\n        return;\r\n      }\r\n\r\n      const hashedPassword = hashString(password);\r\n      const registrationResult = await registerUser(username, hashedPassword);\r\n      \r\n      if (registrationResult.success) {\r\n        await onRegister();\r\n        onClose();\r\n      } else {\r\n        setError(registrationResult.message || 'Ошибка при регистрации');\r\n      }\r\n    } catch (err) {\r\n      setError(err.message || 'Ошибка при регистрации');\r\n      console.error('Registration error:', err);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"popup\">\r\n      <div className=\"popup-container\">\r\n        <div className=\"popup-body\">\r\n          <h2>{isLogin ? 'Вход в аккаунт' : 'Регистрация'}</h2>\r\n          {error && <div className=\"error-message\">{error}</div>}\r\n          <form onSubmit={isLogin ? handleLoginSubmit : handleRegisterSubmit}>\r\n            {isLogin ? (\r\n              <>\r\n                <input \r\n                  type=\"text\" \r\n                  placeholder=\"Логин\" \r\n                  value={username}\r\n                  onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n                <input \r\n                  type=\"password\" \r\n                  placeholder=\"Пароль\" \r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n              </>\r\n            ) : (\r\n              <>\r\n                <input \r\n                  type=\"text\" \r\n                  placeholder=\"Логин\" \r\n                  value={username}\r\n                  onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n                <input \r\n                  type=\"password\" \r\n                  placeholder=\"Пароль\" \r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                <input \r\n                  type=\"password\" \r\n                  placeholder=\"Подтвердите пароль\" \r\n                  value={confirmPassword}\r\n                  onChange={(e) => {\r\n                    setConfirmPassword(e.target.value);\r\n                    if (e.target.value !== password) {\r\n                      setError('Пароли не совпадают');\r\n                    } else {\r\n                      setError('');\r\n                    }\r\n                  }}\r\n                />\r\n              </>\r\n            )}\r\n            <button type=\"submit\">\r\n              {isLogin ? 'Войти' : 'Зарегистрироваться'}\r\n            </button>\r\n          </form>\r\n\r\n          <p onClick={toggleForm} className=\"toggle-form\">\r\n            {isLogin ? 'Нет аккаунта? Зарегистрироваться' : 'Уже есть аккаунт? Войти'}\r\n          </p>\r\n\r\n          <div className=\"popup-close\" onClick={onClose}>&#10006;</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconsole.log(hashString('Cheese'))\r\n\r\nexport default Popup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}