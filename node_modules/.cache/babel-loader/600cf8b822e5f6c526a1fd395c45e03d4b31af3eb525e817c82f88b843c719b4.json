{"ast":null,"code":"const express = require('express');\nconst {\n  Client\n} = require('pg');\nconst cors = require('cors');\nconst app = express();\nconst port = 5000;\napp.use(cors());\nconst client = new Client({\n  user: 'postgres',\n  host: 'localhost',\n  database: 'opd_db',\n  password: '0000',\n  port: 5432\n});\nclient.connect(err => {\n  if (err) {\n    console.error('connection error', err.stack);\n  } else {\n    console.log('connected');\n  }\n});\napp.get('/api/products', async (req, res) => {\n  try {\n    const result = await client.query('SELECT * FROM products');\n    res.json(result.rows);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server error');\n  }\n});\napp.listen(port, () => {\n  console.log(`Server listening on port ${port}`);\n});","map":{"version":3,"names":["express","require","Client","cors","app","port","use","client","user","host","database","password","connect","err","console","error","stack","log","get","req","res","result","query","json","rows","status","send","listen"],"sources":["C:/Users/Yulia/OneDrive - Peter the Great St. Petersburg Polytechnical University/Рабочий стол/bound/OPD_site/src/database.js"],"sourcesContent":["const express = require('express');\r\nconst { Client } = require('pg');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\napp.use(cors());\r\n\r\nconst client = new Client({\r\n    user: 'postgres',\r\n    host: 'localhost',\r\n    database: 'opd_db',\r\n    password: '0000',\r\n    port: 5432,\r\n});\r\n\r\nclient.connect(err => {\r\n    if (err) {\r\n        console.error('connection error', err.stack)\r\n    } else {\r\n        console.log('connected')\r\n    }\r\n})\r\n\r\napp.get('/api/products', async (req, res) => {\r\n    try {\r\n        const result = await client.query('SELECT * FROM products');\r\n        res.json(result.rows);\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).send('Server error');\r\n    }\r\n});\r\n\r\napp.listen(port, () => {\r\n    console.log(`Server listening on port ${port}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,IAAI,CAAC;AAChC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAG,IAAI;AAEjBD,GAAG,CAACE,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;AAEf,MAAMI,MAAM,GAAG,IAAIL,MAAM,CAAC;EACtBM,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,WAAW;EACjBC,QAAQ,EAAE,QAAQ;EAClBC,QAAQ,EAAE,MAAM;EAChBN,IAAI,EAAE;AACV,CAAC,CAAC;AAEFE,MAAM,CAACK,OAAO,CAACC,GAAG,IAAI;EAClB,IAAIA,GAAG,EAAE;IACLC,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEF,GAAG,CAACG,KAAK,CAAC;EAChD,CAAC,MAAM;IACHF,OAAO,CAACG,GAAG,CAAC,WAAW,CAAC;EAC5B;AACJ,CAAC,CAAC;AAEFb,GAAG,CAACc,GAAG,CAAC,eAAe,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMd,MAAM,CAACe,KAAK,CAAC,wBAAwB,CAAC;IAC3DF,GAAG,CAACG,IAAI,CAACF,MAAM,CAACG,IAAI,CAAC;EACzB,CAAC,CAAC,OAAOX,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBO,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,cAAc,CAAC;EACxC;AACJ,CAAC,CAAC;AAEFtB,GAAG,CAACuB,MAAM,CAACtB,IAAI,EAAE,MAAM;EACnBS,OAAO,CAACG,GAAG,CAAC,4BAA4BZ,IAAI,EAAE,CAAC;AACnD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}