{"ast":null,"code":"function x509Error(msg, cert) {\n  throw new Error('SASL channel binding: ' + msg + ' when parsing public certificate ' + cert.toString('base64'));\n}\nfunction readASN1Length(data, index) {\n  let length = data[index++];\n  if (length < 0x80) return {\n    length,\n    index\n  };\n  const lengthBytes = length & 0x7f;\n  if (lengthBytes > 4) x509Error('bad length', data);\n  length = 0;\n  for (let i = 0; i < lengthBytes; i++) {\n    length = length << 8 | data[index++];\n  }\n  return {\n    length,\n    index\n  };\n}\nfunction readASN1OID(data, index) {\n  if (data[index++] !== 0x6) x509Error('non-OID data', data); // 6 = OID\n\n  const {\n    length: OIDLength,\n    index: indexAfterOIDLength\n  } = readASN1Length(data, index);\n  index = indexAfterOIDLength;\n  lastIndex = index + OIDLength;\n  const byte1 = data[index++];\n  let oid = (byte1 / 40 >> 0) + '.' + byte1 % 40;\n  while (index < lastIndex) {\n    // loop over numbers in OID\n    let value = 0;\n    while (index < lastIndex) {\n      // loop over bytes in number\n      const nextByte = data[index++];\n      value = value << 7 | nextByte & 0x7f;\n      if (nextByte < 0x80) break;\n    }\n    oid += '.' + value;\n  }\n  return {\n    oid,\n    index\n  };\n}\nfunction expectASN1Seq(data, index) {\n  if (data[index++] !== 0x30) x509Error('non-sequence data', data); // 30 = Sequence\n  return readASN1Length(data, index);\n}\nfunction signatureAlgorithmHashFromCertificate(data, index) {\n  // read this thread: https://www.postgresql.org/message-id/17760-b6c61e752ec07060%40postgresql.org\n  if (index === undefined) index = 0;\n  index = expectASN1Seq(data, index).index;\n  const {\n    length: certInfoLength,\n    index: indexAfterCertInfoLength\n  } = expectASN1Seq(data, index);\n  index = indexAfterCertInfoLength + certInfoLength; // skip over certificate info\n  index = expectASN1Seq(data, index).index; // skip over signature length field\n  const {\n    oid,\n    index: indexAfterOID\n  } = readASN1OID(data, index);\n  switch (oid) {\n    // RSA\n    case '1.2.840.113549.1.1.4':\n      return 'MD5';\n    case '1.2.840.113549.1.1.5':\n      return 'SHA-1';\n    case '1.2.840.113549.1.1.11':\n      return 'SHA-256';\n    case '1.2.840.113549.1.1.12':\n      return 'SHA-384';\n    case '1.2.840.113549.1.1.13':\n      return 'SHA-512';\n    case '1.2.840.113549.1.1.14':\n      return 'SHA-224';\n    case '1.2.840.113549.1.1.15':\n      return 'SHA512-224';\n    case '1.2.840.113549.1.1.16':\n      return 'SHA512-256';\n    // ECDSA\n    case '1.2.840.10045.4.1':\n      return 'SHA-1';\n    case '1.2.840.10045.4.3.1':\n      return 'SHA-224';\n    case '1.2.840.10045.4.3.2':\n      return 'SHA-256';\n    case '1.2.840.10045.4.3.3':\n      return 'SHA-384';\n    case '1.2.840.10045.4.3.4':\n      return 'SHA-512';\n    // RSASSA-PSS: hash is indicated separately\n    case '1.2.840.113549.1.1.10':\n      index = indexAfterOID;\n      index = expectASN1Seq(data, index).index;\n      if (data[index++] !== 0xa0) x509Error('non-tag data', data); // a0 = constructed tag 0\n      index = readASN1Length(data, index).index; // skip over tag length field\n      index = expectASN1Seq(data, index).index; // skip over sequence length field\n      const {\n        oid: hashOID\n      } = readASN1OID(data, index);\n      switch (hashOID) {\n        // standalone hash OIDs\n        case '1.2.840.113549.2.5':\n          return 'MD5';\n        case '1.3.14.3.2.26':\n          return 'SHA-1';\n        case '2.16.840.1.101.3.4.2.1':\n          return 'SHA-256';\n        case '2.16.840.1.101.3.4.2.2':\n          return 'SHA-384';\n        case '2.16.840.1.101.3.4.2.3':\n          return 'SHA-512';\n      }\n      x509Error('unknown hash OID ' + hashOID, data);\n    // Ed25519 -- see https: return//github.com/openssl/openssl/issues/15477\n    case '1.3.101.110':\n    case '1.3.101.112':\n      // ph\n      return 'SHA-512';\n    // Ed448 -- still not in pg 17.2 (if supported, digest would be SHAKE256 x 64 bytes)\n    case '1.3.101.111':\n    case '1.3.101.113':\n      // ph\n      x509Error('Ed448 certificate channel binding is not currently supported by Postgres');\n  }\n  x509Error('unknown OID ' + oid, data);\n}\nmodule.exports = {\n  signatureAlgorithmHashFromCertificate\n};","map":{"version":3,"names":["x509Error","msg","cert","Error","toString","readASN1Length","data","index","length","lengthBytes","i","readASN1OID","OIDLength","indexAfterOIDLength","lastIndex","byte1","oid","value","nextByte","expectASN1Seq","signatureAlgorithmHashFromCertificate","undefined","certInfoLength","indexAfterCertInfoLength","indexAfterOID","hashOID","module","exports"],"sources":["C:/Users/Yulia/OneDrive - Peter the Great St. Petersburg Polytechnical University/Рабочий стол/bound/OPD_site/node_modules/pg/lib/crypto/cert-signatures.js"],"sourcesContent":["function x509Error(msg, cert) {\n  throw new Error('SASL channel binding: ' + msg + ' when parsing public certificate ' + cert.toString('base64'))\n}\n\nfunction readASN1Length(data, index) {\n  let length = data[index++]\n  if (length < 0x80) return { length, index }\n\n  const lengthBytes = length & 0x7f\n  if (lengthBytes > 4) x509Error('bad length', data)\n\n  length = 0\n  for (let i = 0; i < lengthBytes; i++) {\n    length = (length << 8) | data[index++]\n  }\n\n  return { length, index }\n}\n\nfunction readASN1OID(data, index) {\n  if (data[index++] !== 0x6) x509Error('non-OID data', data) // 6 = OID\n\n  const { length: OIDLength, index: indexAfterOIDLength } = readASN1Length(data, index)\n  index = indexAfterOIDLength\n  lastIndex = index + OIDLength\n\n  const byte1 = data[index++]\n  let oid = ((byte1 / 40) >> 0) + '.' + (byte1 % 40)\n\n  while (index < lastIndex) {\n    // loop over numbers in OID\n    let value = 0\n    while (index < lastIndex) {\n      // loop over bytes in number\n      const nextByte = data[index++]\n      value = (value << 7) | (nextByte & 0x7f)\n      if (nextByte < 0x80) break\n    }\n    oid += '.' + value\n  }\n\n  return { oid, index }\n}\n\nfunction expectASN1Seq(data, index) {\n  if (data[index++] !== 0x30) x509Error('non-sequence data', data) // 30 = Sequence\n  return readASN1Length(data, index)\n}\n\nfunction signatureAlgorithmHashFromCertificate(data, index) {\n  // read this thread: https://www.postgresql.org/message-id/17760-b6c61e752ec07060%40postgresql.org\n  if (index === undefined) index = 0\n  index = expectASN1Seq(data, index).index\n  const { length: certInfoLength, index: indexAfterCertInfoLength } = expectASN1Seq(data, index)\n  index = indexAfterCertInfoLength + certInfoLength // skip over certificate info\n  index = expectASN1Seq(data, index).index // skip over signature length field\n  const { oid, index: indexAfterOID } = readASN1OID(data, index)\n  switch (oid) {\n    // RSA\n    case '1.2.840.113549.1.1.4':\n      return 'MD5'\n    case '1.2.840.113549.1.1.5':\n      return 'SHA-1'\n    case '1.2.840.113549.1.1.11':\n      return 'SHA-256'\n    case '1.2.840.113549.1.1.12':\n      return 'SHA-384'\n    case '1.2.840.113549.1.1.13':\n      return 'SHA-512'\n    case '1.2.840.113549.1.1.14':\n      return 'SHA-224'\n    case '1.2.840.113549.1.1.15':\n      return 'SHA512-224'\n    case '1.2.840.113549.1.1.16':\n      return 'SHA512-256'\n    // ECDSA\n    case '1.2.840.10045.4.1':\n      return 'SHA-1'\n    case '1.2.840.10045.4.3.1':\n      return 'SHA-224'\n    case '1.2.840.10045.4.3.2':\n      return 'SHA-256'\n    case '1.2.840.10045.4.3.3':\n      return 'SHA-384'\n    case '1.2.840.10045.4.3.4':\n      return 'SHA-512'\n    // RSASSA-PSS: hash is indicated separately\n    case '1.2.840.113549.1.1.10':\n      index = indexAfterOID\n      index = expectASN1Seq(data, index).index\n      if (data[index++] !== 0xa0) x509Error('non-tag data', data) // a0 = constructed tag 0\n      index = readASN1Length(data, index).index // skip over tag length field\n      index = expectASN1Seq(data, index).index // skip over sequence length field\n      const { oid: hashOID } = readASN1OID(data, index)\n      switch (hashOID) {\n        // standalone hash OIDs\n        case '1.2.840.113549.2.5':\n          return 'MD5'\n        case '1.3.14.3.2.26':\n          return 'SHA-1'\n        case '2.16.840.1.101.3.4.2.1':\n          return 'SHA-256'\n        case '2.16.840.1.101.3.4.2.2':\n          return 'SHA-384'\n        case '2.16.840.1.101.3.4.2.3':\n          return 'SHA-512'\n      }\n      x509Error('unknown hash OID ' + hashOID, data)\n    // Ed25519 -- see https: return//github.com/openssl/openssl/issues/15477\n    case '1.3.101.110':\n    case '1.3.101.112': // ph\n      return 'SHA-512'\n    // Ed448 -- still not in pg 17.2 (if supported, digest would be SHAKE256 x 64 bytes)\n    case '1.3.101.111':\n    case '1.3.101.113': // ph\n      x509Error('Ed448 certificate channel binding is not currently supported by Postgres')\n  }\n  x509Error('unknown OID ' + oid, data)\n}\n\nmodule.exports = { signatureAlgorithmHashFromCertificate }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}