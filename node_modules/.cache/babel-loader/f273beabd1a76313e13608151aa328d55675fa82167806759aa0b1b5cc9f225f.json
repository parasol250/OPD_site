{"ast":null,"code":"const {\n  Client\n} = require('pg');\nconst client = new Client({\n  user: 'postgres',\n  host: 'localhost',\n  database: 'opd_db',\n  password: '0000',\n  port: 5432\n});\nasync function fetchData() {\n  try {\n    await client.connect();\n    console.log(\"Database connected!\");\n    const usersResult = await client.query('SELECT * FROM users');\n    const itemsResult = await client.query('SELECT * FROM products');\n    const categoriesResult = await client.query('SELECT * FROM categories');\n    const dataSourcesResult = await client.query('SELECT * FROM data_sources');\n    const favoritesResult = await client.query('SELECT * FROM favorites');\n    const scrapeLogsResult = await client.query('SELECT * FROM scrape_logs');\n    const shopsResult = await client.query('SELECT * FROM shops');\n    const data = {\n      users: usersResult.rows,\n      products: itemsResult.rows,\n      categories: categoriesResult.rows,\n      data_sources: dataSourcesResult.rows,\n      favorites: favoritesResult.rows,\n      scrape_logs: scrapeLogsResult.rows,\n      shops: shopsResult.rows\n    };\n    return data;\n  } catch (err) {\n    console.error(\"Database error:\", err);\n    throw err; // Re-throw the error to be handled by the caller\n  } finally {\n    await client.end();\n    console.log(\"Database connection closed.\");\n  }\n}\nmodule.exports = {\n  fetchData\n};","map":{"version":3,"names":["Client","require","client","user","host","database","password","port","fetchData","connect","console","log","usersResult","query","itemsResult","categoriesResult","dataSourcesResult","favoritesResult","scrapeLogsResult","shopsResult","data","users","rows","products","categories","data_sources","favorites","scrape_logs","shops","err","error","end","module","exports"],"sources":["C:/Users/Yulia/OneDrive - Peter the Great St. Petersburg Polytechnical University/Рабочий стол/bound/OPD_site/src/database.js"],"sourcesContent":["const { Client } = require('pg');\r\n\r\nconst client = new Client({\r\n  user: 'postgres',\r\n  host: 'localhost',\r\n  database: 'opd_db',\r\n  password: '0000',\r\n  port: 5432,\r\n});\r\n\r\nasync function fetchData() {\r\n  try {\r\n    await client.connect();\r\n    console.log(\"Database connected!\");\r\n\r\n    const usersResult = await client.query('SELECT * FROM users');\r\n    const itemsResult = await client.query('SELECT * FROM products');\r\n    const categoriesResult = await client.query('SELECT * FROM categories');\r\n    const dataSourcesResult = await client.query('SELECT * FROM data_sources');\r\n    const favoritesResult = await client.query('SELECT * FROM favorites');\r\n    const scrapeLogsResult = await client.query('SELECT * FROM scrape_logs');\r\n    const shopsResult = await client.query('SELECT * FROM shops');\r\n\r\n    const data = {\r\n      users: usersResult.rows,\r\n      products: itemsResult.rows,\r\n      categories: categoriesResult.rows,\r\n      data_sources: dataSourcesResult.rows,\r\n      favorites: favoritesResult.rows,\r\n      scrape_logs: scrapeLogsResult.rows,\r\n      shops: shopsResult.rows,\r\n    };\r\n\r\n    return data;\r\n\r\n  } catch (err) {\r\n    console.error(\"Database error:\", err);\r\n    throw err; // Re-throw the error to be handled by the caller\r\n  } finally {\r\n    await client.end();\r\n    console.log(\"Database connection closed.\");\r\n  }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n  fetchData\r\n};\r\n"],"mappings":"AAAA,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,IAAI,CAAC;AAEhC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAAC;EACxBG,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,WAAW;EACjBC,QAAQ,EAAE,QAAQ;EAClBC,QAAQ,EAAE,MAAM;EAChBC,IAAI,EAAE;AACR,CAAC,CAAC;AAEF,eAAeC,SAASA,CAAA,EAAG;EACzB,IAAI;IACF,MAAMN,MAAM,CAACO,OAAO,CAAC,CAAC;IACtBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAElC,MAAMC,WAAW,GAAG,MAAMV,MAAM,CAACW,KAAK,CAAC,qBAAqB,CAAC;IAC7D,MAAMC,WAAW,GAAG,MAAMZ,MAAM,CAACW,KAAK,CAAC,wBAAwB,CAAC;IAChE,MAAME,gBAAgB,GAAG,MAAMb,MAAM,CAACW,KAAK,CAAC,0BAA0B,CAAC;IACvE,MAAMG,iBAAiB,GAAG,MAAMd,MAAM,CAACW,KAAK,CAAC,4BAA4B,CAAC;IAC1E,MAAMI,eAAe,GAAG,MAAMf,MAAM,CAACW,KAAK,CAAC,yBAAyB,CAAC;IACrE,MAAMK,gBAAgB,GAAG,MAAMhB,MAAM,CAACW,KAAK,CAAC,2BAA2B,CAAC;IACxE,MAAMM,WAAW,GAAG,MAAMjB,MAAM,CAACW,KAAK,CAAC,qBAAqB,CAAC;IAE7D,MAAMO,IAAI,GAAG;MACXC,KAAK,EAAET,WAAW,CAACU,IAAI;MACvBC,QAAQ,EAAET,WAAW,CAACQ,IAAI;MAC1BE,UAAU,EAAET,gBAAgB,CAACO,IAAI;MACjCG,YAAY,EAAET,iBAAiB,CAACM,IAAI;MACpCI,SAAS,EAAET,eAAe,CAACK,IAAI;MAC/BK,WAAW,EAAET,gBAAgB,CAACI,IAAI;MAClCM,KAAK,EAAET,WAAW,CAACG;IACrB,CAAC;IAED,OAAOF,IAAI;EAEb,CAAC,CAAC,OAAOS,GAAG,EAAE;IACZnB,OAAO,CAACoB,KAAK,CAAC,iBAAiB,EAAED,GAAG,CAAC;IACrC,MAAMA,GAAG,CAAC,CAAC;EACb,CAAC,SAAS;IACR,MAAM3B,MAAM,CAAC6B,GAAG,CAAC,CAAC;IAClBrB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC5C;AACF;AAGAqB,MAAM,CAACC,OAAO,GAAG;EACfzB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}