{"ast":null,"code":"//const bcrypt = require('bcrypt');\n//const jwt = require('jsonwebtoken');\nasync function check(username,password_hash,data){// 1. Find user in \"database\"\nconst user=data.find(u=>u.username===username);if(!user){}// 2. Compare hashed password\nconst isPasswordValid=password_hash===user.password_hash;if(!isPasswordValid){}return true;}async function checkCredentials(username,password_hash){try{const response=await fetch('http://localhost:5000/api/users');if(!response.ok){throw new Error(`HTTP error! Status: ${response.status}`);}const data=await response.json();console.log('Users:',data);return check(username,password_hash,data);}catch(error){console.error('Failed to fetch users:',error);}}checkCredentials('a','b');console.log('asdfghjk');module.exports=checkCredentials;","map":{"version":3,"names":["check","username","password_hash","data","user","find","u","isPasswordValid","checkCredentials","response","fetch","ok","Error","status","json","console","log","error","module","exports"],"sources":["C:/Users/Yulia/OneDrive - Peter the Great St. Petersburg Polytechnical University/Рабочий стол/bound/OPD_site/src/components/Login.js"],"sourcesContent":["//const bcrypt = require('bcrypt');\r\n//const jwt = require('jsonwebtoken');\r\n\r\nasync function check(username, password_hash, data){ \r\n    // 1. Find user in \"database\"\r\n    const user = data.find((u) => u.username === username);\r\n    if (!user) {\r\n       \r\n    }\r\n    // 2. Compare hashed password\r\n    const isPasswordValid = (password_hash === user.password_hash);\r\n    if (!isPasswordValid) {\r\n        \r\n    }\r\n    return (true);\r\n}\r\n\r\n\r\nasync function checkCredentials(username, password_hash) {\r\n    try {\r\n        const response = await fetch('http://localhost:5000/api/users');\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log('Users:', data);\r\n        return check(username, password_hash, data);\r\n      } catch (error) {\r\n        console.error('Failed to fetch users:', error);\r\n      }\r\n}\r\n\r\ncheckCredentials('a','b');\r\n\r\nconsole.log('asdfghjk');\r\n\r\nmodule.exports=checkCredentials;"],"mappings":"AAAA;AACA;AAEA,cAAe,CAAAA,KAAKA,CAACC,QAAQ,CAAEC,aAAa,CAAEC,IAAI,CAAC,CAC/C;AACA,KAAM,CAAAC,IAAI,CAAGD,IAAI,CAACE,IAAI,CAAEC,CAAC,EAAKA,CAAC,CAACL,QAAQ,GAAKA,QAAQ,CAAC,CACtD,GAAI,CAACG,IAAI,CAAE,CAEX,CACA;AACA,KAAM,CAAAG,eAAe,CAAIL,aAAa,GAAKE,IAAI,CAACF,aAAc,CAC9D,GAAI,CAACK,eAAe,CAAE,CAEtB,CACA,MAAQ,KAAI,CAChB,CAGA,cAAe,CAAAC,gBAAgBA,CAACP,QAAQ,CAAEC,aAAa,CAAE,CACrD,GAAI,CACA,KAAM,CAAAO,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iCAAiC,CAAC,CAE/D,GAAI,CAACD,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC,CAC3D,CAEA,KAAM,CAAAV,IAAI,CAAG,KAAM,CAAAM,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClCC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAEb,IAAI,CAAC,CAC3B,MAAO,CAAAH,KAAK,CAACC,QAAQ,CAAEC,aAAa,CAAEC,IAAI,CAAC,CAC7C,CAAE,MAAOc,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAChD,CACN,CAEAT,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,CAEzBO,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC,CAEvBE,MAAM,CAACC,OAAO,CAACX,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}