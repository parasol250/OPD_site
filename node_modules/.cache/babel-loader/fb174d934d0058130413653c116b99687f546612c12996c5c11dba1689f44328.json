{"ast":null,"code":"//const bcrypt = require('bcrypt');\n//const jwt = require('jsonwebtoken');\n\nasync function check(username, password_hash, data) {\n  // 1. Find user in \"database\"\n  const user = data.find(u => u.username === username);\n  if (!user) {\n    console.log('User not found');\n    return false;\n  }\n  // 2. Compare hashed password\n  const isPasswordValid = password_hash === user.password_hash;\n  if (!isPasswordValid) {\n    console.log('Invalid password');\n    return false;\n  }\n  return true;\n}\nasync function checkCredentials(username, password_hash) {\n  try {\n    const response = await fetch('http://localhost:5000/api/users');\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Users:', data);\n    return check(username, password_hash, data);\n  } catch (error) {\n    console.error('Failed to fetch users:', error);\n  }\n}\nmodule.exports = checkCredentials;","map":{"version":3,"names":["check","username","password_hash","data","user","find","u","console","log","isPasswordValid","checkCredentials","response","fetch","ok","Error","status","json","error","module","exports"],"sources":["C:/Users/Yulia/OneDrive - Peter the Great St. Petersburg Polytechnical University/Рабочий стол/bound/OPD_site/src/components/Login.js"],"sourcesContent":["//const bcrypt = require('bcrypt');\r\n//const jwt = require('jsonwebtoken');\r\n\r\nasync function check(username, password_hash, data){ \r\n    // 1. Find user in \"database\"\r\n    const user = data.find((u) => u.username === username);\r\n    if (!user) {\r\n       console.log('User not found');\r\n       return false;\r\n    }\r\n    // 2. Compare hashed password\r\n    const isPasswordValid = (password_hash === user.password_hash);\r\n    if (!isPasswordValid) {\r\n        console.log('Invalid password');\r\n        return false;\r\n    }\r\n    return (true);\r\n}\r\n\r\n\r\nasync function checkCredentials(username, password_hash) {\r\n    try {\r\n        const response = await fetch('http://localhost:5000/api/users');\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log('Users:', data);\r\n        return check(username, password_hash, data);\r\n      } catch (error) {\r\n        console.error('Failed to fetch users:', error);\r\n      }\r\n}\r\n\r\nmodule.exports=checkCredentials;"],"mappings":"AAAA;AACA;;AAEA,eAAeA,KAAKA,CAACC,QAAQ,EAAEC,aAAa,EAAEC,IAAI,EAAC;EAC/C;EACA,MAAMC,IAAI,GAAGD,IAAI,CAACE,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACL,QAAQ,KAAKA,QAAQ,CAAC;EACtD,IAAI,CAACG,IAAI,EAAE;IACRG,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7B,OAAO,KAAK;EACf;EACA;EACA,MAAMC,eAAe,GAAIP,aAAa,KAAKE,IAAI,CAACF,aAAc;EAC9D,IAAI,CAACO,eAAe,EAAE;IAClBF,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IAC/B,OAAO,KAAK;EAChB;EACA,OAAQ,IAAI;AAChB;AAGA,eAAeE,gBAAgBA,CAACT,QAAQ,EAAEC,aAAa,EAAE;EACrD,IAAI;IACA,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;IAE/D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMZ,IAAI,GAAG,MAAMQ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClCT,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEL,IAAI,CAAC;IAC3B,OAAOH,KAAK,CAACC,QAAQ,EAAEC,aAAa,EAAEC,IAAI,CAAC;EAC7C,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAChD;AACN;AAEAC,MAAM,CAACC,OAAO,GAACT,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}