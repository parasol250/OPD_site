{"ast":null,"code":"import CryptoJS from'crypto-js';async function check(username,password_hash,data){// 1. Find user in \"database\"\nconst user=data.find(u=>u.username===username);if(!user){console.log('User not found');return false;}// 2. Compare hashed password\nconst isPasswordValid=password_hash===user.password_hash;if(!isPasswordValid){console.log('Invalid password');return false;}return true;}export async function checkCredentials(username,password_hash){try{const response=await fetch('http://localhost:5000/api/users');if(!response.ok){throw new Error(`HTTP error! Status: ${response.status}`);}const data=await response.json();console.log('Users:',data);return check(username,password_hash,data);}catch(error){console.error('Failed to fetch users:',error);}}export function hashString(str){return CryptoJS.SHA256(str).toString();}export async function checkUsernameExists(username){try{const response=await fetch(`http://localhost:5000/api/checkusername?username=${encodeURIComponent(username)}`);if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}return(await response.json()).exists;}catch(err){console.error('Error checking username:',err);throw err;}}// api/auth.js\nexport async function registerUser(username,passwordHash){let role=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'user';try{const response=await fetch('http://localhost:5000/api/register',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username,password_hash:passwordHash,role})});if(!response.ok){const errorData=await response.json().catch(()=>({}));throw new Error(errorData.message||'Ошибка регистрации');}return await response.json();}catch(err){console.error('Registration API error:',err);throw err;}}","map":{"version":3,"names":["CryptoJS","check","username","password_hash","data","user","find","u","console","log","isPasswordValid","checkCredentials","response","fetch","ok","Error","status","json","error","hashString","str","SHA256","toString","checkUsernameExists","encodeURIComponent","exists","err","registerUser","passwordHash","role","arguments","length","undefined","method","headers","body","JSON","stringify","errorData","catch","message"],"sources":["C:/Users/Yulia/OneDrive - Peter the Great St. Petersburg Polytechnical University/Рабочий стол/bound/OPD_site/src/components/Login.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\n\r\nasync function check(username, password_hash, data){ \r\n    // 1. Find user in \"database\"\r\n    const user = data.find((u) => u.username === username);\r\n    if (!user) {\r\n       console.log('User not found');\r\n       return false;\r\n    }\r\n    // 2. Compare hashed password\r\n    const isPasswordValid = (password_hash === user.password_hash);\r\n    if (!isPasswordValid) {\r\n        console.log('Invalid password');\r\n        return false;\r\n    }\r\n    return (true);\r\n}\r\n\r\n\r\nexport async function checkCredentials(username, password_hash) {\r\n    try {\r\n        const response = await fetch('http://localhost:5000/api/users');\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log('Users:', data);\r\n        return check(username, password_hash, data);\r\n      } catch (error) {\r\n        console.error('Failed to fetch users:', error);\r\n      }\r\n}\r\n\r\n\r\nexport function hashString(str) {\r\n  return CryptoJS.SHA256(str).toString();\r\n}\r\n\r\nexport async function checkUsernameExists(username) {\r\n  try {\r\n    const response = await fetch(`http://localhost:5000/api/checkusername?username=${encodeURIComponent(username)}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    return (await response.json()).exists;\r\n  } catch (err) {\r\n    console.error('Error checking username:', err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// api/auth.js\r\nexport async function registerUser(username, passwordHash, role = 'user') {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/register', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ \r\n        username, \r\n        password_hash: passwordHash,\r\n        role \r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}));\r\n      throw new Error(errorData.message || 'Ошибка регистрации');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (err) {\r\n    console.error('Registration API error:', err);\r\n    throw err;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}