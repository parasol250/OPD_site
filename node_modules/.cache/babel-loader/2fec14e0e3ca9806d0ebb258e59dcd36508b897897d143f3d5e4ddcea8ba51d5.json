{"ast":null,"code":"require('dotenv').config();\nconst {\n  Client\n} = require('pg');\nconst http = require('http');\nconst url = require('url');\nconst client = new Client({\n  user: process.env.DB_USER,\n  host: process.env.DB_HOST,\n  database: process.env.DB_NAME,\n  password: String(process.env.DB_PASSWORD),\n  // Явное преобразование в строку\n  port: parseInt(process.env.DB_PORT, 10) // Явное преобразование порта в число\n});\nasync function connectToDatabase() {\n  try {\n    await client.connect();\n    console.log('Connected to the database');\n  } catch (err) {\n    console.error('Database connection error:', err);\n  }\n}\nconnectToDatabase();\nconst server = http.createServer(async (req, res) => {\n  const parsedUrl = url.parse(req.url, true);\n  const pathname = parsedUrl.pathname;\n\n  // CORS headers\n  res.setHeader('Access-Control-Allow-Origin', '*'); // Allow all origins (for development only!)\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n  if (req.method === 'OPTIONS') {\n    // Respond to preflight requests\n    res.writeHead(204);\n    res.end();\n    return;\n  }\n  if (pathname === '/api/products' && req.method === 'GET') {\n    try {\n      const result = await client.query('SELECT * FROM products');\n      res.writeHead(200, {\n        'Content-Type': 'application/json'\n      });\n      res.end(JSON.stringify(result.rows));\n    } catch (err) {\n      console.error('Error fetching products:', err);\n      res.writeHead(500, {\n        'Content-Type': 'text/plain'\n      });\n      res.end('Server error');\n    }\n  } else {\n    res.writeHead(404, {\n      'Content-Type': 'text/plain'\n    });\n    res.end('Not Found');\n  }\n});\nconst port = 5000;\nserver.listen(port, () => {\n  console.log(`Server listening on port ${port}`);\n});","map":{"version":3,"names":["require","config","Client","http","url","client","user","process","env","DB_USER","host","DB_HOST","database","DB_NAME","password","String","DB_PASSWORD","port","parseInt","DB_PORT","connectToDatabase","connect","console","log","err","error","server","createServer","req","res","parsedUrl","parse","pathname","setHeader","method","writeHead","end","result","query","JSON","stringify","rows","listen"],"sources":["C:/Users/Yulia/OneDrive - Peter the Great St. Petersburg Polytechnical University/Рабочий стол/bound/OPD_site/src/database.js"],"sourcesContent":["require('dotenv').config();\r\nconst { Client } = require('pg');\r\nconst http = require('http');\r\nconst url = require('url');\r\n\r\nconst client = new Client({\r\n    user: process.env.DB_USER,\r\n    host: process.env.DB_HOST,\r\n    database: process.env.DB_NAME,\r\n    password: String(process.env.DB_PASSWORD), // Явное преобразование в строку\r\n    port: parseInt(process.env.DB_PORT, 10),  // Явное преобразование порта в число\r\n});\r\n\r\nasync function connectToDatabase() {\r\n    try {\r\n        await client.connect();\r\n        console.log('Connected to the database');\r\n    } catch (err) {\r\n        console.error('Database connection error:', err);\r\n    }\r\n}\r\n\r\nconnectToDatabase();\r\n\r\nconst server = http.createServer(async (req, res) => {\r\n    const parsedUrl = url.parse(req.url, true);\r\n    const pathname = parsedUrl.pathname;\r\n\r\n    // CORS headers\r\n    res.setHeader('Access-Control-Allow-Origin', '*'); // Allow all origins (for development only!)\r\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\r\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\r\n\r\n    if (req.method === 'OPTIONS') {\r\n        // Respond to preflight requests\r\n        res.writeHead(204);\r\n        res.end();\r\n        return;\r\n    }\r\n\r\n    if (pathname === '/api/products' && req.method === 'GET') {\r\n        try {\r\n            const result = await client.query('SELECT * FROM products');\r\n            res.writeHead(200, { 'Content-Type': 'application/json' });\r\n            res.end(JSON.stringify(result.rows));\r\n        } catch (err) {\r\n            console.error('Error fetching products:', err);\r\n            res.writeHead(500, { 'Content-Type': 'text/plain' });\r\n            res.end('Server error');\r\n        }\r\n    } else {\r\n        res.writeHead(404, { 'Content-Type': 'text/plain' });\r\n        res.end('Not Found');\r\n    }\r\n});\r\n\r\nconst port = 5000;\r\n\r\nserver.listen(port, () => {\r\n    console.log(`Server listening on port ${port}`);\r\n});\r\n"],"mappings":"AAAAA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;AAC1B,MAAM;EAAEC;AAAO,CAAC,GAAGF,OAAO,CAAC,IAAI,CAAC;AAChC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMI,GAAG,GAAGJ,OAAO,CAAC,KAAK,CAAC;AAE1B,MAAMK,MAAM,GAAG,IAAIH,MAAM,CAAC;EACtBI,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,OAAO;EACzBC,IAAI,EAAEH,OAAO,CAACC,GAAG,CAACG,OAAO;EACzBC,QAAQ,EAAEL,OAAO,CAACC,GAAG,CAACK,OAAO;EAC7BC,QAAQ,EAAEC,MAAM,CAACR,OAAO,CAACC,GAAG,CAACQ,WAAW,CAAC;EAAE;EAC3CC,IAAI,EAAEC,QAAQ,CAACX,OAAO,CAACC,GAAG,CAACW,OAAO,EAAE,EAAE,CAAC,CAAG;AAC9C,CAAC,CAAC;AAEF,eAAeC,iBAAiBA,CAAA,EAAG;EAC/B,IAAI;IACA,MAAMf,MAAM,CAACgB,OAAO,CAAC,CAAC;IACtBC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;EAC5C,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVF,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAED,GAAG,CAAC;EACpD;AACJ;AAEAJ,iBAAiB,CAAC,CAAC;AAEnB,MAAMM,MAAM,GAAGvB,IAAI,CAACwB,YAAY,CAAC,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACjD,MAAMC,SAAS,GAAG1B,GAAG,CAAC2B,KAAK,CAACH,GAAG,CAACxB,GAAG,EAAE,IAAI,CAAC;EAC1C,MAAM4B,QAAQ,GAAGF,SAAS,CAACE,QAAQ;;EAEnC;EACAH,GAAG,CAACI,SAAS,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC,CAAC;EACnDJ,GAAG,CAACI,SAAS,CAAC,8BAA8B,EAAE,oBAAoB,CAAC;EACnEJ,GAAG,CAACI,SAAS,CAAC,8BAA8B,EAAE,cAAc,CAAC;EAE7D,IAAIL,GAAG,CAACM,MAAM,KAAK,SAAS,EAAE;IAC1B;IACAL,GAAG,CAACM,SAAS,CAAC,GAAG,CAAC;IAClBN,GAAG,CAACO,GAAG,CAAC,CAAC;IACT;EACJ;EAEA,IAAIJ,QAAQ,KAAK,eAAe,IAAIJ,GAAG,CAACM,MAAM,KAAK,KAAK,EAAE;IACtD,IAAI;MACA,MAAMG,MAAM,GAAG,MAAMhC,MAAM,CAACiC,KAAK,CAAC,wBAAwB,CAAC;MAC3DT,GAAG,CAACM,SAAS,CAAC,GAAG,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC,CAAC;MAC1DN,GAAG,CAACO,GAAG,CAACG,IAAI,CAACC,SAAS,CAACH,MAAM,CAACI,IAAI,CAAC,CAAC;IACxC,CAAC,CAAC,OAAOjB,GAAG,EAAE;MACVF,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAED,GAAG,CAAC;MAC9CK,GAAG,CAACM,SAAS,CAAC,GAAG,EAAE;QAAE,cAAc,EAAE;MAAa,CAAC,CAAC;MACpDN,GAAG,CAACO,GAAG,CAAC,cAAc,CAAC;IAC3B;EACJ,CAAC,MAAM;IACHP,GAAG,CAACM,SAAS,CAAC,GAAG,EAAE;MAAE,cAAc,EAAE;IAAa,CAAC,CAAC;IACpDN,GAAG,CAACO,GAAG,CAAC,WAAW,CAAC;EACxB;AACJ,CAAC,CAAC;AAEF,MAAMnB,IAAI,GAAG,IAAI;AAEjBS,MAAM,CAACgB,MAAM,CAACzB,IAAI,EAAE,MAAM;EACtBK,OAAO,CAACC,GAAG,CAAC,4BAA4BN,IAAI,EAAE,CAAC;AACnD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}